import tkinter as tk
from tkinter import messagebox

class HorrorMovieStoreApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Horror Movie Store")
        self.root.withdraw()  
        self.movies = [  
            {"title": "The Cabin in the Woods", "genre": "Sci-Fi", "price": 10.95, "image": "C:/Users/Admin/Documents/Final project/CabinInTheWoods.gif",
             "description": "Five friends go to a remote cabin where they get more than they bargained for.",
             "cast": "Kristen Connolly, Chris Hemsworth, Anna Hutchison", "release_year": 2012},
            {"title": "Beetlejuice", "genre": "Comedy", "price": 8.99, "image": "C:/Users/Admin/Documents/Final project/Beetlejuice.gif",
             "description": "A couple of recently deceased ghosts hire a malicious spirit to scare away the new inhabitants of their former home.",
             "cast": "Michael Keaton, Alec Baldwin, Geena Davis", "release_year": 1988},
            {"title": "Midsommar", "genre": "Slasher", "price": 12.95, "image": "C:/Users/Admin/Documents/Final project/Midsommar.gif",
             "description": "A couple travels to Sweden to attend a rural hometown's fabled mid-summer festival, only to find themselves caught in the grip of a pagan cult.",
             "cast": "Florence Pugh, Jack Reynor, Vilhelm Blomgren", "release_year": 2019},
            {"title": "Nosferatu", "genre": "New", "price": 20.99, "image": "C:/Users/Admin/Documents/Final project/Nosferatu.gif",
             "description": "A young man is sent to Transylvania to assist a vampire with the purchase of a new home, but the vampire has other plans for his new friend.",
             "cast": "Lily-Rose Depp, Bill Skarsg√•rd, Nicholas Hoult", "release_year": 2024},
            {"title": "The Craft", "genre": "Teen", "price": 15.95, "image": "C:/Users/Admin/Documents/Final project/thecraft.gif",
             "description": "A newcomer to a high school joins a trio of outcast teenage girls who practice witchcraft, and they all soon learn the consequences of their powers.",
             "cast": "Robin Tunney, Fairuza Balk, Neve Campbell", "release_year": 1996}
        ]
        self.cart = []  
        self.create_login_window()  

    def create_login_window(self):
        self.login_window = tk.Toplevel(self.root)  
        self.login_window.title("Come in if you dare")  
        self.login_window.geometry("500x700")  
        self.login_window.config(bg="black")  

        image_path = "c:/Users/Admin/Documents/Final project/HorrorMovieMadness.gif"
        try:
            self.login_image = tk.PhotoImage(file=image_path)  
            self.login_image_label = tk.Label(self.login_window, image=self.login_image, bg="black")
            self.login_image_label.pack(pady=10)  
        except:
            tk.Label(self.login_window, text="Login Image (Alt Text)", fg="white", bg="black").pack(pady=10)

        tk.Label(self.login_window, text="Horror Movie Store Login", font=("Helvetica", 16), fg="red", bg="black").pack(pady=20)
        tk.Label(self.login_window, text="Username:", fg="white", bg="black", font=("Helvetica", 12)).pack(pady=10)
        self.username_entry = tk.Entry(self.login_window, font=("Helvetica", 12))
        self.username_entry.pack(pady=10)

        tk.Label(self.login_window, text="Password:", fg="white", bg="black", font=("Helvetica", 12)).pack(pady=10)
        self.password_entry = tk.Entry(self.login_window, show="*", font=("Helvetica", 12))
        self.password_entry.pack(pady=10)

        login_button = tk.Button(self.login_window, text="Login", command=self.check_login, bg="green", fg="black")
        login_button.pack(pady=20)  

        exit_button = tk.Button(self.login_window, text="Exit", command=self.exit_app, bg="red", fg="white")
        exit_button.pack(pady=10)  

    def check_login(self):
        username = self.username_entry.get()  
        password = self.password_entry.get()  

        correct_username = "user"  
        correct_password = "password123"  

        if username == correct_username and password == correct_password:
            self.login_window.destroy()  
            self.create_main_window()  
            self.root.deiconify()  
        else:
            messagebox.showerror("Login Error", "Incorrect username or password. Please try again.")

    def create_main_window(self):
        self.root.config(bg="black")  

        for widget in self.root.winfo_children():
            widget.destroy()

        title_label = tk.Label(self.root, text="Horror Movie Madness Store", font=("Creepster", 24), fg="red", bg="black")
        title_label.pack(pady=20)

        self.movie_listbox = tk.Listbox(self.root, width=50, height=10)
        self.movie_listbox.pack(pady=10)

        for movie in self.movies:  
            self.movie_listbox.insert(tk.END, movie['title'])

        view_button = tk.Button(self.root, text="View Movie Details", command=self.view_movie_details, bg="darkred", fg="white")
        view_button.pack(pady=10)

        cart_button = tk.Button(self.root, text="View Cart", command=self.view_cart, bg="darkred", fg="white")
        cart_button.pack(pady=10)

        checkout_button = tk.Button(self.root, text="Checkout", command=self.checkout, bg="green", fg="black")
        checkout_button.pack(pady=10)

        back_to_login_button = tk.Button(self.root, text="Back to Login", command=self.back_to_login, bg="red", fg="white")
        back_to_login_button.pack(pady=10)

    def back_to_login(self):
        self.root.withdraw()  
        self.create_login_window()  

    def view_movie_details(self):
        try:
            selected_movie_index = self.movie_listbox.curselection()[0]
            selected_movie = self.movies[selected_movie_index]

            details_window = tk.Toplevel(self.root)
            details_window.title(f"{selected_movie['title']} Details")
            details_window.geometry("800x900")
            details_window.config(bg="black")

            tk.Label(details_window, text=f"Title: {selected_movie['title']}", font=("Helvetica", 14), fg="white", bg="black").pack(pady=10)
            tk.Label(details_window, text=f"Genre: {selected_movie['genre']}", font=("Helvetica", 12), fg="white", bg="black").pack(pady=5)
            tk.Label(details_window, text=f"Price: ${selected_movie['price']}", font=("Helvetica", 12), fg="white", bg="black").pack(pady=5)
            tk.Label(details_window, text=f"Release Year: {selected_movie['release_year']}", font=("Helvetica", 12), fg="white", bg="black").pack(pady=5)
            tk.Label(details_window, text=f"Cast: {selected_movie['cast']}", font=("Helvetica", 12), fg="white", bg="black").pack(pady=5)
            tk.Label(details_window, text=f"Description: {selected_movie['description']}", font=("Helvetica", 12), fg="white", bg="black", wraplength=750).pack(pady=5)

            try:
                movie_image_path = selected_movie["image"]
                movie_image = tk.PhotoImage(file=movie_image_path)
                image_label = tk.Label(details_window, image=movie_image, bg="black")
                image_label.photo = movie_image
                image_label.pack(pady=10)
            except Exception as e:
                print(f"Error loading image: {e}")
                tk.Label(details_window, text="Image not available", fg="white", bg="black").pack(pady=10)

            rent_button = tk.Button(details_window, text="Rent", command=lambda: self.add_to_cart(selected_movie, details_window), bg="green", fg="black")
            rent_button.pack(pady=10)

            exit_button = tk.Button(details_window, text="Back", command=details_window.destroy, bg="red", fg="white")
            exit_button.pack(pady=10)

        except IndexError:
            messagebox.showwarning("Selection Error", "Please select a movie to view.")

    def add_to_cart(self, movie, details_window):
        self.cart.append(movie) 
        messagebox.showinfo("Added to Cart", f"{movie['title']} has been added to your cart!")
        details_window.destroy() 

    def remove_from_cart(self, movie, cart_window):
        if movie in self.cart:
            self.cart.remove(movie)
            messagebox.showinfo("Removed from Cart", f"{movie['title']} has been removed from your cart!")
            cart_window.destroy()  
        else:
            messagebox.showwarning("Error", "Movie not found in cart.")

    def update_cart_window(self, cart_window):
        for widget in cart_window.winfo_children():
            widget.destroy()

        if not self.cart:
            tk.Label(cart_window, text="Your cart is empty!", font=("Helvetica", 14), fg="white", bg="black").pack(pady=20)
        else:
            tk.Label(cart_window, text="Movies in your Cart:", font=("Helvetica", 14), fg="white", bg="black").pack(pady=10)

            total_price = 0
            total_items = len(self.cart)
            for movie in self.cart:
                frame = tk.Frame(cart_window, bg="black")
                frame.pack(pady=5)
                tk.Label(frame, text=movie["title"], font=("Helvetica", 12), fg="white", bg="black").pack(side=tk.LEFT, padx=10)
                remove_button = tk.Button(frame, text="Remove", command=lambda m=movie: self.remove_from_cart(m, cart_window), bg="red", fg="black")
                remove_button.pack(side=tk.LEFT)

                total_price += movie["price"]  

            tk.Label(cart_window, text=f"Total Items: {total_items}", font=("Helvetica", 14), fg="white", bg="black").pack(pady=5)
            tk.Label(cart_window, text=f"Total Price: ${total_price:.2f}", font=("Helvetica", 14), fg="white", bg="black").pack(pady=10)

            checkout_button = tk.Button(cart_window, text="Checkout", command=self.checkout, bg="green", fg="black")
            checkout_button.pack(pady=10)

        back_button = tk.Button(cart_window, text="Back", command=cart_window.destroy, bg="red", fg="white")
        back_button.pack(pady=10)

    def view_cart(self):
        self.cart_window = tk.Toplevel(self.root)  
        self.cart_window.title("Your Cart")
        self.cart_window.config(bg="black")

        self.update_cart_window(self.cart_window)

    def checkout(self):
        if self.cart:
            total = sum(movie['price'] for movie in self.cart)
            messagebox.showinfo("Checkout", f"Your total is ${total:.2f}. Thank you for shopping!")
            self.cart.clear()  

            if hasattr(self, 'cart_window') and self.cart_window.winfo_exists():
                self.cart_window.destroy()

        else:
            messagebox.showwarning("Cart is Empty", "Your cart is empty. Add some movies first.")

    def exit_app(self):
        confirm_exit = messagebox.askyesno("Exit", "Are you sure you want to exit?")
        if confirm_exit:
            self.login_window.destroy()  
            self.root.quit()  

if __name__ == "__main__":
    root = tk.Tk()
    app = HorrorMovieStoreApp(root)
    root.mainloop()


